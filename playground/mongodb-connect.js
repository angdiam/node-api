// const MongoClient = require('mongodb').MongoClient;

//ES6 feature OBJECT DESTRUCTURING
var user = {name: 'Andrew', age: 25};
var {name} = user //this creates a varible name and set it equal to the user.name
console.log(name);

const {MongoClient, ObjectID} = require('mongodb'); //identical to top line but we also get mthe ObjectID variable (which is a construction function)
// var obj = new ObjectID(); //you create a new random unique indentifier using the ObjectID function
// console.log(obj);

MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,db) => {
//the 1st argument is the url where your databae lives e.g. heroku, amazonAWS
//TodoApp is the name of the database we will create - there is no need to create it first and then maipulate it
//the 2nd argument is the callback function that will execute after the connection has succeeded or failed
//db object is what we can use to issue commands for the database, add documents etc.
if (err) {
  return console.log('Unable to connect to MongDB server',err);
}

console.log('Connected to MongoDB server');

//We will create 2 databases a TODOcollection and a Users collection
//This is how to add a new record / document
db.collection('Todos').insertOne({
  //no need to create the Todos collection before using interval
  //insertOne allows us to insert 1 document
  text: 'Something to do',
  completed: false
},(err,result) => {
  if (err) {
    return console.log('Unable to insert todo',err);
  }

  console.log(JSON.stringify(result.ops,undefined,2));
  //The ops attribute stores all the documents we have inserted.
  //You will see that you get the document you added but also MongoDB automatically creates for
  //each document a unique property _id

})

db.collection('User').insertOne({
  name: 'Andrew',
  age: 25,
  location: 'Philadephia'
},(err,result) => {
  if (err) {
    return console.log('Unable to insert user',err);
  }

  console.log(JSON.stringify(result.ops,undefined,2));
  //the _id is generated by MongoDB and is a unique 12 bytes identifier of each document made up of random characters
  //as opposed to incremented integer as in most databases. _id can be split in parts which have a meaning
  //first 4 bytes are the timestamp so no need for createdAt
  //next 3 is machine identifier, so unique per computer, next 2 process id, laste 3 byte counter similar to other databases
  //if inside the document you do prvide _id  for example _id: 123 then Mongodb will not create an _id for you. We dont prefer this
  // console.log(JSON.stringify(result.ops[0]._id.getTimeStamp(),undefined,2)); //returns the timestamp part for ObjectID  _id

})


//Check Robomongo to see your collections

db.close();   //closes the connection with the db server
})
